---
import { Link } from './UI'
// import Image from 'astro/components/Image.astro'
import type { IPin } from '../interfaces/IPin'
import type { ILike } from '../interfaces/ILike'

interface Props {
    pin   : IPin
    likes : any
    target: string
}
const { pin, likes, target } = Astro.props

const saved = likes?.some((like: ILike) => {
  return like.photoId.toString() === pin.id.toString();
})
---
<div class="m-2">
    <div class="relative cursor-none w-auto rounded-lg overflow-hidden transition-all duration-500 ease-in-out Photo" id="Photo">
        <img width={pin?.width} height={pin?.height} class="h-full w-96 md:h-auto md:w-full rounded-lg" loading="lazy" src={pin.src.original ? pin.src.original : pin.src.medium}  alt={pin.alt} 
        />
        <div class="hidden absolute top-0 w-[385px] md:w-full h-full flex-col justify-between p-1 pr-2 pt-2 pb-2 z-50 hover:bg-blackOverlay menu animate-slide-fwd rounded-lg transition-all duration-500 ease-in-out" id="menu">
            <div class="flex items-center justify-between">
                <div class="flex gap-2">
                    <a id="download" download href={pin.src.original ? pin.src.original : pin.src.medium}
                    class="bg-white w-9 h-9 rounded-full flex items-center justify-center text-dark text-xl opacity-75 hover:opacity-100 hover:shadow-md outline-none"
                    onclick="downloadImage(pin.src.original ? pin.src.original : pin.src.medium)"
                    >
                    <i class="fa fa-arrow-circle-down" aria-hidden="true"></i>
                    </a>
                </div>
                {
                    !saved && (
                    <div>
                        <button type="submit" class={`bg-rose-500 opacity-70 hover:opacity-100 text-white  p-2 font-bold rounded-full flex items-center justify-center hover:shadow-md outline-none`} id="likeButton"
                        data-photo-url={pin.src.original ? pin.src.original : pin.src.medium}
                        data-photo-id={pin?.id ? pin?.id : '00000000'} 
                        >
                            <i class="fa fa-heart" aria-hidden="true"></i>
                            <div id="likeLoader" class="hidden animate-spin  size-3 ml-3 border-[3px] border-current border-t-transparent text-white rounded-full transition-all duration-500 ease-in-out" role="status" aria-label="loading"
                            >
                                <span class="sr-only">Loading...</span>
                            </div>
                        </button>
                    </div>
                    )
                }
            </div>
            <div class="flex justify-between items-start gap-2 w-full">
                <a href={`/details/${pin?.id}`} target={target} class="bg-white flex items-center gap-2 text-black font-bold p-1 pl-4 pr-4 rounded-full opacity-70 hover:opacity-100 hover:shadow-md mb-2">
                    <i class="bi bi-arrow-up-right-circle-fill"></i>
                    {`view details...`}
                </a>
                {
                    saved && (
                        <div>
                            <button type="submit" class={`${ saved  ? "bg-red-500" : "bg-red-500"} p-1 opacity-70 hover:opacity-100 text-white px-2 py-1 font-bold rounded-full flex items-center justify-center hover:shadow-md outline-none mb-2 transition-all duration-500 ease-in-out`} data-id={likes?.find((like: ILike) => like.photoId === pin.id.toString())?._id} aria-label="Delete like">
                                <i class="bi bi-trash2-fill"></i>

                                <div id="dealeteLoader" class="hidden animate-spin  size-3 ml-3 border-[3px] border-current border-t-transparent text-white rounded-full transition-all duration-500 ease-in-out" role="status" aria-label="loading">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </button>
                        </div>
                    )
                }
            </div>
          </div>
    </div>
</div>
    <Link to={pin?.photographer_url} className="flex gap-2 mb-2 items-center ml-3" target={target}>
        <i class="bi bi-person-circle icon"></i> 
        <p class="font-bold capitalize mb-1">
            {pin?.photographer}
        </p>
    </Link>
</div>
 <style>
	.icon{
		font-size:18px;
	}
</style>
<script>
document.querySelectorAll('.Photo').forEach(photo => {
    const menu = photo.querySelector(".menu");
    photo.addEventListener("mouseover", () => {
        menu?.classList.add('flex');
        menu?.classList.remove('hidden');
    });

    photo.addEventListener('mouseout', () => {
        menu?.classList.add("hidden");
    });

});

const deleteBtns = document.querySelectorAll<HTMLButtonElement>('[data-id]');

deleteBtns.forEach(btn => {
  btn.addEventListener('click', async (e) => {
    deleteLike(btn, e);
  });
});

async function deleteLike(btn: HTMLButtonElement, e: Event) {
  e.preventDefault();
  const loader = btn.children[1] as HTMLDivElement;
  loader.classList.remove('hidden');

  const id = btn.dataset.id as string;
  interface Response {
    message: string;
  }

  const res = await fetch(`/api/likes/${id}.json`, {
    method: 'DELETE',
    headers: {
        'Content-Type': 'application/json'
    },
  });

  const { message }: Response = await res.json();
  console.log(message);
  location.reload();
}

const likeButtons = document.querySelectorAll("#likeButton");

likeButtons.forEach(button => {
  button.addEventListener("click", handleLike);
});

async function handleLike(e: any) {
    const button = e.currentTarget;

    const url = button.dataset.photoUrl;
    const id = button.dataset.photoId;

    const loader = button.querySelector("#likeLoader");
    loader.classList.remove("hidden");

    const response = await fetch(`/api/likes/like.json`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            url,
            id 
        })
    });

    const {  message } = await response.json();
    if(!response.ok) throw new Error(message);
    location.reload();
}

async function downloadImage(url: string) {



  const response = await fetch(url);

  if(!response.ok) {
    throw new Error('Image failed to load');
  }

  const blob = await response.blob();

  // Hide loading indicator

  // Create URL from blob
  const imageUrl = URL.createObjectURL(blob);

  // Create anchor tag to download
  const link = document.createElement('a');
  link.href = imageUrl;
  link.download = 'image.png';

  // Simulate click to download
  link.click();

  // Clean up
  URL.revokeObjectURL(imageUrl);

}


const links = document.querySelectorAll('a[download]') as NodeListOf<HTMLAnchorElement>;
links.forEach(link =>  {
    link.addEventListener("click", (e) => {
        console.log(e)
        const url = new URL(link.href);
        url.protocol = 'https';
        url.host = 'images.pexels.com';
        downloadImage(url.href);
    })
});

// async function downloadImage(url: string) {

//   // Show loading indicator

//   const response = await fetch(url);

//   if(!response.ok) {
//     throw new Error('Image failed to load');
//   }

//   const blob = await response.blob();

//   // Hide loading indicator

//   // Create URL from blob
//   const imageUrl = URL.createObjectURL(blob);

//   // Create anchor tag to download
//   const link = document.createElement('a');
//   link.href = imageUrl;
//   link.download = 'image.png';

//   // Simulate click to download
//   link.click();

//   // Clean up
//   URL.revokeObjectURL(imageUrl);

// }


</script>